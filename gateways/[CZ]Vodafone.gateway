
function getName() {
    return "[CZ]Vodafone"
}

function getVersion() {
    return "2011-06-16"
}

function getMaintainer() {
    return "Kamil Páral <kamil.paral@gmail.com>"
}

function getMinProgramVersion() {
    return "0.22"
}

function getWebsite() {
    return "http://www.vodafonesms.cz"
}

function getDescription() {
    return "Oficiální brána Vodafone určená pro veřejnost. Zdarma odesílá zprávy do sítě Vodafone, vyžaduje však opsání bezpečnostního kódu."
}

function getSupportedPrefixes() {
    return ["+420"]
}

function getPreferredPrefixes() {
    return ["+420608","+420773","+420774","+420775","+420776","+420777"]
}

function getSMSLength() {
    return 160
}

function getMaxChars() {
    return 160
}

function getMaxParts() {
    return 5
}

function getSignatureExtraLength() {
    return 0
}

function getDelayBetweenMessages() {
    return 30
}

function getSupportedLanguages() {
    return ['cs']
}

function getFeatures() {
    return ["CAPTCHA",
            "SENDER_NUMBER"]
}

function send() {
    // check whether there is a supplied sender number
    if (SENDERNUMBER.length == 0) {
        EXEC.setProblem("SIGNATURE_NEEDED")
        return false
    }
    // sender number must start with +420
    if (SENDERNUMBER.indexOf("+420") != 0) {
        msg = "Číslo odesilatele musí pocházet z České republiky \
(začínat na +420). Aktuální číslo odesilatele: " + SENDERNUMBER
        EXEC.setProblem("CUSTOM_MESSAGE", msg)
        return false
    }

    // start page
    content = EXEC.getURL("https://park.vodafone.cz/", [])
    
    // go to the link "Poslat SMS"
    re = /\?x=([^']*?)'.*Poslat SMS/
    match = re.exec(content)
    var urlid = match[1]
    content = EXEC.getURL("https://park.vodafone.cz/", ['x', urlid])
        
    // extract important variables
    re = /<img alt="" id="id\d+" src="\.\.\/\?x=(.+)&amp;random=(.+)" title/
    match = re.exec(content)
    captcha_par1 = match[1]
    captcha_par2 = match[2]
    
    re = /'\.\.\/\?x=(.+?)', 'sendButton'/
    match = re.exec(content)
    form_par1 = match[1]
    
    // download image
    EXEC.setReferer("https://park.vodafone.cz/egw/.0")
    getData = ["x", captcha_par1, "random", captcha_par2]
    content = EXEC.getURL("https://park.vodafone.cz/", getData)

    // show image
    var captcha = EXEC.recognizeImage(content, "")
    
    // server returns HTTP 500 Internal Server Error if we send empty captcha
    // if user cancelled captcha resolving (and returned us empty catpcha code),
    // let's inform him right away
    if (captcha.length() == 0) {
        EXEC.setProblem("WRONG_CODE")
        return false
    }

    // send message
    getData = ["x", form_par1]
    postData = ["recipients:recipientInput", NUMBER,
                "senderMsisdn", SENDERNUMBER,
                "text", MESSAGE,
                "captcha:password", captcha,
                "id7_hf_0", "",
                "proof:field", "vf-park",
                "sendButton", "1"]
    try {
        content = EXEC.postURL("https://park.vodafone.cz/", getData, postData)
    } catch(exc) {
        // Vodafone server with throw HTTP 500 Internal Server Error on invalid
        // data (like invalid sender number, invalid recipient number, empty text).
        // If we receive an exception, it almost certainly means some invalid input,
        // but we don't know which one. We probably don't have better solution 
        // than to tell this to the user.
        EXEC.setProblem("NO_REASON")
        return false
    }

    // check if message was successfully sent
    re = /Zpráva byla úspěšně odeslána/
    match = re.exec(content)
    if (match) {
        // all ok
        return true
    }
    
    // look for possible error messages
    re = /<label class="errorlevel error".*?>(.+)<\/label>/
    match = re.exec(content)
    if (match) {
        // gateway told us what's wrong
        EXEC.setProblem("GATEWAY_MESSAGE", match[1])
        return false
    }
    
    // neither success nor error message was found
    return false
}
